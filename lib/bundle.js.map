{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/block.js","webpack:///./lib/board.js","webpack:///./lib/slideR.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;AClFA;AAAA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;;AAEA;AACA,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C;AAC7C;AACA,KAAK;AACL,+BAA+B;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;;AAGA;AACA;AACA;AACA,8CAA8C,OAAO;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAkB,mBAAmB,IAAI,mBAAmB,IAAI,mBAAmB;AACnF;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;ACrQA;;AAEA;;AAEA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,YAAY;AACZ;;AAEA;AACA,6DAA6D,oBAAoB,cAAc,EAAE;;AAEjG;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;;AAGL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"./bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/slideR.js\");\n","const faces = [\n  document.getElementById(\"face-1\"),\n  document.getElementById(\"face-2\"),\n  document.getElementById(\"face-3\")\n];\n\n\nexport default class Block {\n\n  constructor(position, orientation, length, target, board) {\n    this.position = position || [-1, -1];\n    this.orientation = orientation;\n    this.length = length;\n    this.target = target || false;\n    this.board = board;\n    this.x = this.position[1] * 100; //vertex for top left corner\n    this.y = this.position[0] * 100;\n\n    if (orientation === \"horizontal\") {\n      this.width = length * 100; //vertex for bottom right corner\n      this.height = 100;\n    } else {\n      this.width = 100;\n      this.height = length * 100;\n    }\n    this.setMaxVertex();\n  }\n\n  setMaxVertex() {\n    if (this.orientation === \"horizontal\") {\n      this.maxX = this.x + this.length * 100; //vertex for bottom right corner\n      this.maxY = this.y + 100;\n    } else {\n      this.maxX = this.x + 100; //vertex for bottom right corner\n      this.maxY = this.y + this.length * 100;\n    }\n  }\n\n  setX(newX) {\n    const minX = this.minValidXYValues()[0];\n    const maxX = this.maxValidXYValues()[0];\n    if (newX <= maxX && newX >= minX) {\n      this.x = newX;\n    } else if (newX > maxX) {\n      this.x = maxX;\n    } else {\n      this.x = minX;\n    }\n  }\n\n  setY(newY) {\n    const minY = this.minValidXYValues()[1];\n    const maxY = this.maxValidXYValues()[1];\n    if (newY <= maxY && newY >= minY) {\n      this.y = newY;\n    } else if (newY > maxY) {\n      this.y = maxY;\n    } else {\n      this.y = minY;\n    }\n  }\n\n\n  minValidXYValues() {\n    const validMoves = this.validMoves();\n    let minX;\n    let minY;\n    validMoves.forEach((move) => {\n      if (move[1] < minX || minX === undefined) {\n        minX = move[1];\n      }\n      if (move[0] < minY || minY === undefined) {\n        minY = move[0];\n      }\n    });\n\n    return [minX * 100, minY * 100];\n  }\n\n  maxValidXYValues() {\n    const validMoves = this.validMoves();\n    let maxX;\n    let maxY;\n    validMoves.forEach((move) => {\n      if (move[1] > maxX || maxX === undefined) {\n        maxX = move[1];\n      }\n      if (move[0] > maxY || maxY === undefined) {\n        maxY = move[0];\n      }\n    });\n\n    return [maxX * 100, maxY * 100];\n  }\n\n\n  finalMove(startPos) {\n    const block = this.board.grid[startPos[0]][startPos[1]];\n    if (block.target === true) {\n      for (let c = startPos[1] + block.length; c < 6; c++) {\n        if (Boolean(this.board.grid[startPos[0]][c])) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  validMoves() {\n    const block = this.board.grid[this.position[0]][this.position[1]];\n    const moves = [this.position];\n\n    if (block.orientation === \"horizontal\") {\n      for (let c = this.position[1] + block.length; c < 6; c++) {\n        if (!Boolean(this.board.grid[this.position[0]][c])) {\n          moves.push([this.position[0], c + 1 - block.length]);\n        } else {\n          break;\n        }\n      }\n      for (let c = this.position[1] - 1; c >= 0; c--) {\n        if (!Boolean(this.board.grid[this.position[0]][c])) {\n          moves.push([this.position[0], c]);\n        } else {\n          break;\n        }\n      }\n    }\n\n    if (block.orientation === \"vertical\") {\n      for (let r = this.position[0] + block.length; r < 6; r++) {\n        if (!Boolean(this.board.grid[r][this.position[1]])) {\n          moves.push([r + 1 - block.length, this.position[1]]);\n        } else {\n          break;\n        }\n      }\n      for (let r = this.position[0] - 1; r >= 0; r--) {\n        if (!Boolean(this.board.grid[r][this.position[1]])) {\n          moves.push([r, this.position[1]]);\n        } else {\n          break;\n        }\n      }\n    }\n\n    return moves;\n  }\n\n  move(newPos, isUndo) {\n    if (this.position === newPos) {\n      return;\n    }\n\n    this.x = newPos[1] * 100;\n    this.y = newPos[0] * 100;\n\n    const oldPos = this.position;\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.orientation === \"horizontal\") {\n        this.board.grid[this.position[0]][this.position[1] + i] = null;\n      } else {\n        this.board.grid[this.position[0] + i][this.position[1]] = null;\n      }\n    }\n\n    for (let i = 0; i < this.length; i++) {\n      if (this.orientation === \"horizontal\") {\n        this.board.grid[newPos[0]][newPos[1] + i] = this;\n      } else {\n        this.board.grid[newPos[0] + i][newPos[1]] = this;\n      }\n    }\n\n    this.position = newPos;\n    if (isUndo) {\n      this.board.moveCount -= 1;\n    } else {\n      this.board.moveCount += 1;\n      this.board.previousMoves.push([oldPos, newPos]);\n    }\n  }\n\n  draw(ctx) {\n    const x = this.x;\n    const y = this.y;\n    const height = this.height;\n    const width = this.width;\n    const radius = 10;\n    let blockColor = \"#a2a2f2\";\n    if (this.target) {\n      blockColor = this.targetColor();\n    }\n    ctx.fillStyle = blockColor;\n    ctx.beginPath();\n\n    ctx.moveTo(x + radius, y);\n    ctx.lineTo(x + width - radius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    ctx.lineTo(x + width, y + height - radius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    ctx.lineTo(x + radius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    ctx.lineTo(x, y + radius);\n    ctx.quadraticCurveTo(x, y, x + radius, y);\n\n    ctx.fill();\n    ctx.closePath();\n\n    if (this.target) {\n      ctx.drawImage(\n        this.pickFace(),\n        this.x + 120 + Math.floor(Math.random() * 5),\n        this.y + 10 + Math.floor(Math.random() * 5));\n    }\n  }\n\n  contains(mx, my) {\n    return (\n      (mx >= this.x && mx <= this.maxX) &&\n      (my >= this.y && my <= this.maxY)\n    );\n  }\n\n  snapToGrid() {\n    let roundedX = Math.round(this.x / 100) * 100;\n    let roundedY = Math.round(this.y / 100) * 100;\n    if (roundedX + this.width > 600) {\n      roundedX -= 100;\n    }\n    if (roundedY + this.height > 600) {\n      roundedY -= 100;\n    }\n    this.x = roundedX;\n    this.y = roundedY;\n\n    // only move if the new position is different from the previous position\n    if (this.position[0] !== roundedY/100 || this.position[1] !== roundedX/100) {\n      this.move([roundedY/100, roundedX/100]);\n    }\n\n  }\n\n  targetColor() {\n    const bValue = 255 - ((255 * this.x) / 500);\n    const gValue = 50 + (200 * this.x) / 500;\n    return `rgb(${Math.floor(bValue)}, ${Math.floor(gValue)}, ${Math.floor(bValue)})`;\n  }\n\n  pickFace() {\n    if (this.x < 200) {\n      return faces[0];\n    } else if (this.x >= 200 && this.x <= 300) {\n      return faces[1];\n    } else {\n      return faces[2];\n    }\n  }\n\n\n}\n","import Block from './block';\n\nexport default class Board {\n\n  constructor(/*TODO initial state stuff */) {\n    const arr = new Array(6);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = new Array(6);\n    }\n    this.grid = arr;\n    this.blocks = [];\n    this.moveCount = 0;\n    this.previousMoves = [];\n  }\n\n\n  initializeBoard(blocks) {\n    blocks.forEach((block) => {\n      this.addBlock(block);\n    });\n  }\n\n  addBlock(block) {\n    if (block.orientation === \"horizontal\") {\n      this.addHorizontalBlock(block);\n    } else {\n      this.addVerticalBlock(block);\n    }\n    this.blocks.push(block);\n  }\n\n  addVerticalBlock(block) {\n    const r = block.position[0];\n    const c = block.position[1];\n    for (var i = 0; i < block.length; i++) {\n      this.grid[r + i][c] = block;\n    }\n  }\n\n  addHorizontalBlock(block) {\n    const r = block.position[0];\n    const c = block.position[1];\n    for (var i = 0; i < block.length; i++) {\n      this.grid[r][c + i] = block;\n    }\n  }\n\n  undoMove() {\n    const lastMove = this.previousMoves.pop();\n    if (!lastMove) {\n      return;\n    }\n\n    const oldPos = lastMove[0];\n    const newPos = lastMove[1];\n\n    const block = this.grid[newPos[0]][newPos[1]];\n\n    block.move(oldPos, true);\n  }\n\n  resetBoard() {\n    //TODO write reset method\n  }\n}\n","import Board from './board';\nimport Block from './block';\n\n\nclass SlideR {\n\n  constructor(canvas, board) {\n    this.html= document.getElementById(\"html\");\n    this.canvas = canvas;\n    this.width = canvas.width;\n    this.height = canvas.height;\n    this.ctx = canvas.getContext(\"2d\");\n    this.undo = document.getElementById(\"undo\");\n    this.reset = document.getElementById(\"reset\");\n    this.moveCounter = document.getElementById(\"move-counter\");\n\n    this.board = board;\n    this.rerender = true;\n    this.shapes = board.blocks || [];\n    this.selection = null;\n    this.dragging = false;\n    this.offsetX = 0;\n    this.offsetY = 0;\n\n    this.addMouseListeners();\n    this.addButtonListeners();\n\n    setInterval(() => this.draw(), 30);\n\n  }\n\n  draw() {\n    // if (this.rerender) {\n      this.moveCounter.innerHTML = this.board.moveCount;\n      this.ctx.clearRect(0, 0, this.width, this.height);\n      this.ctx.fillStyle = \"black\";\n      this.ctx.fillRect(0, 0, this.width, this.height);\n\n      for (var i = 0; i < this.shapes.length; i++) {\n        this.shapes[i].draw(this.ctx);\n      }\n\n    //   this.rerender = false;\n    // }\n  }\n\n  getMouse(e) {\n    let element = this.canvas, offsetX = 0, offsetY = 0, mx, my;\n\n    while (element.offsetParent) {\n      offsetX += element.offsetLeft;\n      offsetY += element.offsetTop;\n      element = element.offsetParent;\n    }\n\n    mx = e.pageX - offsetX;\n    my = e.pageY - offsetY;\n\n    return {x: mx, y: my};\n  }\n\n  addMouseListeners() {\n    this.canvas.addEventListener('selectstart', function(e) { e.preventDefault(); return false; }, false);\n\n    this.canvas.addEventListener('mousedown', (e) => {\n      const mouse = this.getMouse(e);\n      const mx = mouse.x;\n      const my = mouse.y;\n      for (var i = 0; i < this.shapes.length; i++) {\n        if (this.shapes[i].contains(mx, my)) {\n          const shape = this.shapes[i];\n\n          this.offsetX = mx - this.shapes[i].x;\n          this.offsetY = my - this.shapes[i].y;\n\n          this.dragging = true;\n          this.selection = this.shapes[i];\n          this.rerender = true;\n        }\n      }\n    });\n\n    this.canvas.addEventListener('mousemove', (e) => {\n      if (this.dragging) {\n        const mouse = this.getMouse(e);\n        if (this.selection.orientation === \"horizontal\") {\n          this.selection.setX(mouse.x - this.offsetX);\n        } else {\n          this.selection.setY(mouse.y - this.offsetY);\n        }\n        this.selection.setMaxVertex();\n        this.rerender = true;\n      }\n    });\n\n    this.html.addEventListener('mouseup', this.mouseUpCallback.bind(this));\n  }\n\n  mouseUpCallback(e)  {\n    this.dragging = false;\n    if (this.selection) {\n      this.selection.snapToGrid();\n    }\n    this.selection = null;\n    this.rerender = true;\n  }\n\n  addButtonListeners() {\n    this.undo.addEventListener(\"click\", () => {\n      this.board.undoMove();\n      this.rerender = true;\n    });\n\n    this.reset.addEventListener(\"click\", () => {\n      this.board.resetBoard();\n      this.rerender = true;\n    });\n\n\n  }\n}\n\nconst canvas = document.getElementById(\"game-canvas\");\n\nconst b = new Board();\nconst block1 = new Block([0,0], \"horizontal\", 3, false, b);\nconst block2 = new Block([1,2], \"vertical\", 3, false, b);\nconst block3 = new Block([0,5], \"vertical\", 3, false, b);\nconst block4 = new Block([2,0], \"horizontal\", 2, true, b);\nconst block5 = new Block([3,0], \"vertical\", 2, false, b);\nconst block6 = new Block([3,4], \"horizontal\", 2, false, b);\nconst block7 = new Block([5,0], \"horizontal\", 3, false, b);\nconst block8 = new Block([4,4], \"vertical\", 2, false, b);\nb.initializeBoard([\n  block1,\n  block2,\n  block3,\n  block4,\n  block5,\n  block6,\n  block7,\n  block8\n]);\n\nconst s = new SlideR(canvas, b);\n"],"sourceRoot":""}